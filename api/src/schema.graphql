type Query {
  boulders(offset: Int, before: String, after: String, first: Int, last: Int): BoulderNodeConnection
  boulder(
    """The ID of the object"""
    id: ID!
  ): BoulderNode
  problems(offset: Int, before: String, after: String, first: Int, last: Int): ProblemNodeConnection
  problem(
    """The ID of the object"""
    id: ID!
  ): ProblemNode
  beta(
    """The ID of the object"""
    id: ID!
  ): BetaNode
  _debug: DjangoDebug
}

type BoulderNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BoulderNodeEdge!]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `BoulderNode` and its cursor."""
type BoulderNodeEdge {
  """The item at the end of the edge"""
  node: BoulderNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type BoulderNode implements Node {
  createdAt: DateTime!
  holds(offset: Int, before: String, after: String, first: Int, last: Int): HoldNodeConnection!
  problems(offset: Int, before: String, after: String, first: Int, last: Int): ProblemNodeConnection!

  """The ID of the object"""
  id: ID!
  image: Image!
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type HoldNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [HoldNodeEdge!]!
}

"""A Relay edge containing a `HoldNode` and its cursor."""
type HoldNodeEdge {
  """The item at the end of the edge"""
  node: HoldNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type HoldNode implements Node {
  boulder: BoulderNode!

  """Free-form annotations created by the user"""
  annotation: String!

  """The ID of the object"""
  id: ID!
  position: SVGPosition!
}

"""
A 2D position in an image, in the terms that the UI uses. The bounds of the
coordinates are:
    - `[0, 100]` in the smaller of the two dimensions
    - `[0, 100 * width / height]` or `[0, 100 * height / width]`

The origin is the top-left, with X increasing to the right and Y increasing
down.

The purpose of this system is to provide normalized width and height so that
UI elements can be sized statically without having to worry about varying
image resolutions.
"""
type SVGPosition {
  """X position, 0-100ish"""
  x: Float!

  """Y position, 0-100ish"""
  y: Float!
}

type ProblemNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProblemNodeEdge!]!
}

"""A Relay edge containing a `ProblemNode` and its cursor."""
type ProblemNodeEdge {
  """The item at the end of the edge"""
  node: ProblemNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type ProblemNode implements Node {
  name: String!

  """External link, e.g. to Mountain Project"""
  externalLink: String!
  holds(offset: Int, before: String, after: String, first: Int, last: Int): HoldNodeConnection!
  boulder: BoulderNode!
  createdAt: DateTime!
  betas(offset: Int, before: String, after: String, first: Int, last: Int): BetaNodeConnection!

  """The ID of the object"""
  id: ID!
}

type BetaNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BetaNodeEdge!]!
}

"""A Relay edge containing a `BetaNode` and its cursor."""
type BetaNodeEdge {
  """The item at the end of the edge"""
  node: BetaNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type BetaNode implements Node {
  name: String!
  problem: ProblemNode!
  createdAt: DateTime!
  moves(offset: Int, before: String, after: String, first: Int, last: Int): BetaMoveNodeConnection!

  """The ID of the object"""
  id: ID!
}

type BetaMoveNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BetaMoveNodeEdge!]!
}

"""A Relay edge containing a `BetaMoveNode` and its cursor."""
type BetaMoveNodeEdge {
  """The item at the end of the edge"""
  node: BetaMoveNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type BetaMoveNode implements Node {
  beta: BetaNode!

  """Destination hold for this move. Mutually exclusive with `position`."""
  hold: HoldNode

  """Ordering number of the hold in the beta, starting at 1"""
  order: Int!

  """Free-form annotations created by the user"""
  annotation: String!

  """The ID of the object"""
  id: ID!

  """Body part being moved"""
  bodyPart: BodyPart!

  """Position of a free move. Null for hold-attached moves."""
  position: SVGPosition

  """Is this one of the initial moves for the beta?"""
  isStart: Boolean!

  """Is this the last move in the beta *for its body part*?"""
  isLastInChain: Boolean!
}

"""A body part that someone could put on a hold"""
enum BodyPart {
  LEFT_HAND
  RIGHT_HAND
  LEFT_FOOT
  RIGHT_FOOT
}

"""An image, e.g. JPG or PNG"""
type Image {
  url: String!

  """Image width, in pixels"""
  pixelWidth: Int!

  """Image height, in pixels"""
  pixelHeight: Int!

  """
  Image width, either `100` if portrait or `width/height*100` if landscape
  """
  svgWidth: Float!

  """
  Image width, either `100` if landscape or `height/width*100` if portrait
  """
  svgHeight: Float!
}

"""Debugging information for the current query."""
type DjangoDebug {
  """Executed SQL queries for this API query."""
  sql: [DjangoDebugSQL]

  """Raise exceptions for this API query."""
  exceptions: [DjangoDebugException]
}

"""Represents a single database query made to a Django managed DB."""
type DjangoDebugSQL {
  """The type of database being used (e.g. postrgesql, mysql, sqlite)."""
  vendor: String!

  """The Django database alias (e.g. 'default')."""
  alias: String!

  """The actual SQL sent to this database."""
  sql: String

  """Duration of this database query in seconds."""
  duration: Float!

  """The raw SQL of this query, without params."""
  rawSql: String!

  """JSON encoded database query parameters."""
  params: String!

  """Start time of this database query."""
  startTime: Float!

  """Stop time of this database query."""
  stopTime: Float!

  """Whether this database query took more than 10 seconds."""
  isSlow: Boolean!

  """Whether this database query was a SELECT."""
  isSelect: Boolean!

  """Postgres transaction ID if available."""
  transId: String

  """Postgres transaction status if available."""
  transStatus: String

  """Postgres isolation level if available."""
  isoLevel: String

  """Postgres connection encoding if available."""
  encoding: String
}

"""Represents a single exception raised."""
type DjangoDebugException {
  """The class of the exception"""
  excType: String!

  """The message of the exception"""
  message: String!

  """The stack trace"""
  stack: String!
}

type Mutation {
  createBoulder(input: CreateBoulderMutationInput!): CreateBoulderMutationPayload

  """
  Create a new boulder, problem, and beta together. Intended to streamline
  the process of uploading a new boulder picture for the user.
  
  All initial data for the new problem and beta will be automatically
  generated.
  """
  createBoulderWithFriends(input: CreateBoulderWithFriendsMutationInput!): CreateBoulderWithFriendsMutationPayload

  """
  Add a hold to a boulder. Optionally, also bind the hold to a pre-existing
  problem.
  """
  createHold(input: CreateHoldMutationInput!): CreateHoldMutationPayload

  """Modify an existing hold"""
  updateHold(input: UpdateHoldMutationInput!): UpdateHoldMutationPayload

  """Delete a hold from a boulder"""
  deleteHold(input: DeleteHoldMutationInput!): DeleteHoldMutationPayload

  """
  Create a new problem for a specific boulder. If not given, a name will be
  generated.
  """
  createProblem(input: CreateProblemMutationInput!): CreateProblemMutationPayload
  updateProblem(input: UpdateProblemMutationInput!): UpdateProblemMutationPayload
  deleteProblem(input: DeleteProblemMutationInput!): DeleteProblemMutationPayload

  """Add a hold to a problem"""
  createProblemHold(input: CreateProblemHoldMutationInput!): CreateProblemHoldMutationPayload

  """Remove a hold from a problem"""
  deleteProblemHold(input: DeleteProblemHoldMutationInput!): DeleteProblemHoldMutationPayload
  createBeta(input: CreateBetaMutationInput!): CreateBetaMutationPayload
  updateBeta(input: UpdateBetaMutationInput!): UpdateBetaMutationPayload
  copyBeta(input: CopyBetaMutationInput!): CopyBetaMutationPayload
  deleteBeta(input: DeleteBetaMutationInput!): DeleteBetaMutationPayload

  """
  Add a new move to a beta. The move can either be appended to the end, or
  inserted in the middle (by specifying a previous_beta_move_id).
  """
  createBetaMove(input: CreateBetaMoveMutationInput!): CreateBetaMoveMutationPayload
  updateBetaMove(input: UpdateBetaMoveMutationInput!): UpdateBetaMoveMutationPayload
  deleteBetaMove(input: DeleteBetaMoveMutationInput!): DeleteBetaMoveMutationPayload
}

type CreateBoulderMutationPayload {
  boulder: BoulderNode!
  clientMutationId: String
}

input CreateBoulderMutationInput {
  imageFile: String!
  clientMutationId: String
}

"""
Create a new boulder, problem, and beta together. Intended to streamline
the process of uploading a new boulder picture for the user.

All initial data for the new problem and beta will be automatically
generated.
"""
type CreateBoulderWithFriendsMutationPayload {
  boulder: BoulderNode!
  problem: ProblemNode!
  beta: BetaNode!
  clientMutationId: String
}

input CreateBoulderWithFriendsMutationInput {
  """Name of the field in the HTTP body containing the boulder image data"""
  imageFile: String!
  clientMutationId: String
}

"""
Add a hold to a boulder. Optionally, also bind the hold to a pre-existing
problem.
"""
type CreateHoldMutationPayload {
  hold: HoldNode!
  problem: ProblemNode
  clientMutationId: String
}

input CreateHoldMutationInput {
  boulderId: ID!

  """Position of the new hold, or empty for random"""
  position: SVGPositionInput = null
  problemId: ID
  annotation: String
  clientMutationId: String
}

input SVGPositionInput {
  """X position, 0-100ish"""
  x: Float!

  """Y position, 0-100ish"""
  y: Float!
}

"""Modify an existing hold"""
type UpdateHoldMutationPayload {
  hold: HoldNode!
  clientMutationId: String
}

input UpdateHoldMutationInput {
  holdId: ID!
  position: SVGPositionInput = null
  annotation: String
  clientMutationId: String
}

"""Delete a hold from a boulder"""
type DeleteHoldMutationPayload {
  hold: HoldNode!
  clientMutationId: String
}

input DeleteHoldMutationInput {
  holdId: ID!
  clientMutationId: String
}

"""
Create a new problem for a specific boulder. If not given, a name will be
generated.
"""
type CreateProblemMutationPayload {
  problem: ProblemNode!
  clientMutationId: String
}

input CreateProblemMutationInput {
  boulderId: ID!
  name: String
  externalLink: String
  clientMutationId: String
}

type UpdateProblemMutationPayload {
  problem: ProblemNode!
  clientMutationId: String
}

input UpdateProblemMutationInput {
  problemId: ID!
  name: String
  externalLink: String
  clientMutationId: String
}

type DeleteProblemMutationPayload {
  problem: ProblemNode!
  clientMutationId: String
}

input DeleteProblemMutationInput {
  problemId: ID!
  clientMutationId: String
}

"""Add a hold to a problem"""
type CreateProblemHoldMutationPayload {
  problem: ProblemNode!
  hold: HoldNode!
  clientMutationId: String
}

input CreateProblemHoldMutationInput {
  problemId: ID!
  holdId: ID!
  clientMutationId: String
}

"""Remove a hold from a problem"""
type DeleteProblemHoldMutationPayload {
  problem: ProblemNode!
  hold: HoldNode!
  clientMutationId: String
}

input DeleteProblemHoldMutationInput {
  problemId: ID!
  holdId: ID!
  clientMutationId: String
}

type CreateBetaMutationPayload {
  beta: BetaNode!
  clientMutationId: String
}

input CreateBetaMutationInput {
  problemId: ID!
  name: String
  clientMutationId: String
}

type UpdateBetaMutationPayload {
  beta: BetaNode!
  clientMutationId: String
}

input UpdateBetaMutationInput {
  betaId: ID!
  name: String
  clientMutationId: String
}

type CopyBetaMutationPayload {
  beta: BetaNode!
  clientMutationId: String
}

input CopyBetaMutationInput {
  betaId: ID!
  clientMutationId: String
}

type DeleteBetaMutationPayload {
  beta: BetaNode!
  clientMutationId: String
}

input DeleteBetaMutationInput {
  betaId: ID!
  clientMutationId: String
}

"""
Add a new move to a beta. The move can either be appended to the end, or
inserted in the middle (by specifying a previous_beta_move_id).
"""
type CreateBetaMoveMutationPayload {
  betaMove: BetaMoveNode!
  beta: BetaNode!
  clientMutationId: String
}

input CreateBetaMoveMutationInput {
  betaId: ID!
  bodyPart: BodyPart!

  """Hold to connect the move to. Mutually exclusive with `position`."""
  holdId: ID

  """
  Position of the move, for free moves. Mutually exclusive with `hold_id`.
  """
  position: SVGPositionInput = null

  """Move *preceding* this one in the beta. Null to add to the end."""
  previousBetaMoveId: ID
  clientMutationId: String
}

type UpdateBetaMoveMutationPayload {
  betaMove: BetaMoveNode!
  clientMutationId: String
}

input UpdateBetaMoveMutationInput {
  betaMoveId: ID!
  order: Int

  """Hold to connect the move to. Mutually exclusive with `position`."""
  holdId: ID

  """
  Position of the move, for free moves. Mutually exclusive with `hold_id`.
  """
  position: SVGPositionInput = null
  annotation: String
  clientMutationId: String
}

type DeleteBetaMoveMutationPayload {
  betaMove: BetaMoveNode!
  clientMutationId: String
}

input DeleteBetaMoveMutationInput {
  betaMoveId: ID!
  clientMutationId: String
}