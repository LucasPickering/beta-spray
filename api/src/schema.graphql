"""
Will check if the user has any/all permissions for the resolved value of this field before returning it.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasRetvalPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

type BetaMoveNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """Date+time of object creation"""
  createdAt: DateTime!
  permissions: Permissions!
  beta: BetaNode!

  """Body part being moved"""
  bodyPart: BodyPart!

  """The ordering of this move within the beta, starting at 1"""
  order: Int!

  """Is this one of the initial moves for the beta?"""
  isStart: Boolean!

  """Informative text related to the move, created by the user"""
  annotation: String!

  """Where the move is going; either a hold or a free position"""
  target: HoldNodeSVGPosition!
}

"""A connection to a list of items."""
type BetaMoveNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [BetaMoveNodeEdge!]!
}

"""An edge in a connection."""
type BetaMoveNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: BetaMoveNode!
}

type BetaNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """User-friendly name of the beta"""
  name: String!

  """Date+time of object creation"""
  createdAt: DateTime!
  owner: UserNode!
  permissions: Permissions!
  problem: ProblemNode!
  moves(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): BetaMoveNodeConnection!
}

"""A connection to a list of items."""
type BetaNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [BetaNodeEdge!]!
}

"""An edge in a connection."""
type BetaNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: BetaNode!
}

"""A body part that someone could put on a hold"""
enum BodyPart {
  LEFT_HAND
  RIGHT_HAND
  LEFT_FOOT
  RIGHT_FOOT
}

type BoulderNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """Date+time of object creation"""
  createdAt: DateTime!
  permissions: Permissions!
  image: Image!
}

input CopyBetaInput {
  id: ID!
}

input CopyProblemInput {
  id: ID!
}

input CreateBetaInput {
  problem: ID!
  name: String
}

input CreateBetaMoveInput {
  beta: ID!
  bodyPart: BodyPart!
  hold: ID
  position: SVGPositionInput

  """Move prior to this one in the beta"""
  previousBetaMove: ID
}

input CreateBoulderWithFriendsInput {
  image: ImageUpload!
  problemName: String
  betaName: String
}

input CreateHoldInput {
  """The ID of the problem to add the hold to."""
  problem: ID!

  """Category of hold to create"""
  kind: HoldKind!

  """Position of the hold within the boulder image, or null for random"""
  position: SVGPositionInput
}

"""Date with time (isoformat)"""
scalar DateTime

"""General category/description of a hold"""
enum HoldKind {
  JUG
  CRIMP
  SLOPER
  PINCH
  POCKET
  CHIP
}

type HoldNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  problem: ProblemNode!

  """Date+time of object creation"""
  createdAt: DateTime!
  permissions: Permissions!

  """Type of hold, e.g. jug or crimp"""
  kind: HoldKind!

  """Orientation of the hold (opposite the direction of pull)"""
  orientation: HoldOrientation!

  """Informative text related to the hold, created by the user"""
  annotation: String!

  """Position of the hold within the boulder image"""
  position: SVGPosition!
}

"""A connection to a list of items."""
type HoldNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [HoldNodeEdge!]!
}

"""An edge in a connection."""
type HoldNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: HoldNode!
}

union HoldNodeSVGPosition = HoldNode | SVGPosition

"""
Direction that the (most) usable side of a hold is facing, i.e. opposite the normal direction of pull
"""
enum HoldOrientation {
  UP
  DOWN
  LEFT
  RIGHT
}

type Image {
  """Image access URL"""
  url: String!

  """Image width, in pixels"""
  width: Int!

  """Image height, in pixels"""
  height: Int!
  svgWidth: Float!
  svgHeight: Float!
}

"""
An uploaded image. To upload a file, see: https://strawberry.rocks/docs/guides/file-upload#sending-file-upload-requests
"""
scalar ImageUpload

type Mutation {
  updateUser(input: UpdateUserInput!): UserNode! @hasRetvalPerm(permissions: [{app: "auth", permission: "edit_user"}], any: true)
  deleteHold(input: NodeInput!): HoldNode! @hasRetvalPerm(permissions: [{app: "core", permission: "delete_hold"}], any: true)
  updateProblem(input: UpdateProblemInput!): ProblemNode! @hasRetvalPerm(permissions: [{app: "core", permission: "edit_problem"}], any: true)
  deleteProblem(input: NodeInput!): ProblemNode! @hasRetvalPerm(permissions: [{app: "core", permission: "delete_problem"}], any: true)
  updateBeta(input: UpdateBetaInput!): BetaNode! @hasRetvalPerm(permissions: [{app: "core", permission: "edit_beta"}], any: true)
  deleteBeta(input: NodeInput!): BetaNode! @hasRetvalPerm(permissions: [{app: "core", permission: "delete_beta"}], any: true)
  deleteBetaMove(input: NodeInput!): BetaMoveNode! @hasRetvalPerm(permissions: [{app: "core", permission: "delete_betamove"}], any: true)
  logOut: Void
  createBoulderWithFriends(
    """Input data for `createBoulderWithFriends` mutation"""
    input: CreateBoulderWithFriendsInput!
  ): BetaNode!
  createHold(
    """Input data for `createHold` mutation"""
    input: CreateHoldInput!
  ): HoldNode! @hasRetvalPerm(permissions: [{app: "core", permission: "create_hold"}], any: true)
  updateHold(
    """Input data for `updateHold` mutation"""
    input: UpdateHoldInput!
  ): HoldNode! @hasRetvalPerm(permissions: [{app: "core", permission: "edit_hold"}], any: true)
  copyProblem(
    """Input data for `copyProblem` mutation"""
    input: CopyProblemInput!
  ): ProblemNode!
  createBeta(
    """Input data for `createBeta` mutation"""
    input: CreateBetaInput!
  ): BetaNode!
  copyBeta(
    """Input data for `copyBeta` mutation"""
    input: CopyBetaInput!
  ): BetaNode!
  createBetaMove(
    """Input data for `createBetaMove` mutation"""
    input: CreateBetaMoveInput!
  ): BetaMoveNode! @hasRetvalPerm(permissions: [{app: "core", permission: "create_betamove"}], any: true)
  updateBetaMove(
    """Input data for `updateBetaMove` mutation"""
    input: UpdateBetaMoveInput!
  ): BetaMoveNode! @hasRetvalPerm(permissions: [{app: "core", permission: "edit_betamove"}], any: true)
}

type NoUser {
  ignore: String!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: ID!
}

"""Input of an object that implements the `Node` interface."""
input NodeInput {
  id: ID!
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permissions {
  """Can you edit this object?"""
  canEdit: Boolean!

  """Can you delete this object?"""
  canDelete: Boolean!
}

type ProblemNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """User-friendly name of the problem"""
  name: String!

  """External link, e.g. to Mountain Project"""
  externalLink: String!

  """Date+time of object creation"""
  createdAt: DateTime!
  owner: UserNode!
  permissions: Permissions!

  """Access level for other users to this problem"""
  visibility: Visibility!
  boulder: BoulderNode!
  holds(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): HoldNodeConnection!
  betas(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): BetaNodeConnection!
}

"""A connection to a list of items."""
type ProblemNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ProblemNodeEdge!]!
}

"""An edge in a connection."""
type ProblemNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ProblemNode!
}

type Query {
  """Get a problem by ID"""
  problem(
    """The ID of the object."""
    id: ID!
  ): ProblemNode

  """Get a beta by ID"""
  beta(
    """The ID of the object."""
    id: ID!
  ): BetaNode
  problems(
    """
    Are you the creator of the problem? If set, show only your problems, or only someone else's.
    """
    isMine: Boolean

    """Filter by problem visibility"""
    visibility: Visibility

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ProblemNodeConnection!
  currentUser: UserNodeNoUser!
}

type SVGPosition {
  """X position, 0-100ish"""
  x: Float!

  """Y position, 0-100ish"""
  y: Float!
}

input SVGPositionInput {
  """X position, 0-100ish"""
  x: Float!

  """Y position, 0-100ish"""
  y: Float!
}

input UpdateBetaInput {
  id: ID!
  name: String
}

input UpdateBetaMoveInput {
  id: ID!
  order: Int
  hold: ID
  position: SVGPositionInput
  annotation: String
}

input UpdateHoldInput {
  id: ID!
  position: SVGPositionInput
  annotation: String
  kind: HoldKind
  orientation: HoldOrientation
}

input UpdateProblemInput {
  id: ID!
  name: String

  """External link, e.g. to Mountain Project"""
  externalLink: String

  """Access level for other users to this problem"""
  visibility: Visibility
}

input UpdateUserInput {
  id: ID!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String
}

type UserNode implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """Username"""
  username: String!
  isCurrentUser: Boolean!
  isGuest: Boolean!
}

union UserNodeNoUser = UserNode | NoUser

"""Visibility of an object, i.e. who else can see it?"""
enum Visibility {
  UNLISTED
  PUBLIC
}

"""Represents NULL values"""
scalar Void

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}