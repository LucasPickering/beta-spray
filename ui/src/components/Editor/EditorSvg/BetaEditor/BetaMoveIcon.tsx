import React from "react";
import { BodyPart } from "util/svg";
import {
  styleDraggable,
  styleDraggableHighlight,
  styleDragging,
} from "styles/svg";
import { Interpolation, Theme } from "@emotion/react";
import { isDefined } from "util/func";
import { SvgIcon, SvgIconProps, useTheme } from "@mui/material";

interface Props {
  bodyPart: BodyPart;
  order?: number;
  color?: string;
  isFree?: boolean;
  isStart?: boolean;
  hasAnnotation?: boolean;
  draggable?: boolean;
  isDragging?: boolean;
  isHighlighted?: boolean;
  css?: Interpolation<Theme>;
}

/**
 * Dumb component representing a beta move. This is a "raw" icon, meaning it's
 * just the inline SVG element, *without* the wrapping SVG.
 */
const BetaMoveIcon = React.forwardRef<
  SVGGElement,
  Props & React.SVGProps<SVGGElement>
>(
  (
    {
      bodyPart,
      order,
      color = "white",
      isFree = false,
      isStart = false,
      hasAnnotation = false,
      draggable = false,
      isDragging = false,
      isHighlighted = false,
      css: parentCss,
      ...rest
    },
    ref
  ) => {
    const { palette } = useTheme();
    return (
      <g
        ref={ref}
        css={[
          { stroke: "#00000000" },
          draggable && styleDraggable,
          isDragging && styleDragging,
          isHighlighted && styleDraggableHighlight,
          parentCss,
        ]}
        {...rest}
      >
        {/* We need this wrapper so we don't fuck up the transform that the
            icon does on itself. Scaling improves touch interaction. */}
        <g css={{ transform: "scale(1.5)" }}>
          <IconBodyPartRaw
            bodyPart={bodyPart}
            css={[
              { fill: color },
              // Free moves get a dotted outline. This has to go *before* the
              // isStart rule, because that one should always take priority
              // for stroke color
              isFree && { stroke: "white", strokeDasharray: "1,0.5" },
              isStart && { stroke: palette.secondary.main },
            ]}
          />
        </g>

        {isDefined(order) && (
          <text
            css={{
              fontSize: 4,
              userSelect: "none",
              pointerEvents: "none",
              // This should contrast all possible fill colors
              color: "black",
            }}
            textAnchor="middle"
            dominantBaseline="middle"
          >
            {order}
          </text>
        )}

        {/* We don't want to show this if the move is highlighted because it
            won't fit with the order number there, and the annotation itself
            will already be visible in the tooltip */}
        {/* {hasAnnotation && !isHighlighted && <IconNotesRaw />} */}
      </g>
    );
  }
);

BetaMoveIcon.displayName = "BetaMoveIcon";

/**
 * A standalone version of a beta move icon, which can be used in standard
 * HTML context (i.e. outside of an SVG).
 */
export const BetaMoveIconWrapped: React.FC<
  Props & Pick<SvgIconProps, "fontSize">
> = ({ fontSize, ...rest }) => (
  // View box was determined experimentally, so it's slightly off but close enough
  <SvgIcon viewBox="-4.5 -4.5 9 9" fontSize={fontSize}>
    <BetaMoveIcon {...rest} />
  </SvgIcon>
);

// Below are the "raw" icons that we piece together to make the final icon.

/**
 * Get the basic icon for a move, based on its body part. This defines the
 * shape of the final move.
 */
const IconBodyPartRaw: React.FC<
  { bodyPart: BodyPart } & React.SVGProps<SVGPathElement>
> = ({ bodyPart, ...rest }) => {
  switch (bodyPart) {
    case "LEFT_HAND":
      return <IconTriangleRaw transform="rotate(-45)" {...rest} />;
    case "RIGHT_HAND":
      return <IconTriangleRaw transform="rotate(45)" {...rest} />;
    case "LEFT_FOOT":
      return <IconOvalRaw transform="rotate(45)" {...rest} />;
    case "RIGHT_FOOT":
      return <IconOvalRaw transform="rotate(-45)" {...rest} />;
  }
};

const IconTriangleRaw: React.FC<React.SVGProps<SVGPathElement>> = (props) => (
  // Generated by polygons.py
  <path
    d="M-0.866,-2.25 A1,1,0,0,1,0.866,-2.25 L2.38,0.376 A1,1,0,0,1,1.52,1.88
      L-1.52,1.88 A1,1,0,0,1,-2.38,0.376 Z"
    strokeWidth={0.5}
    {...props}
  />
);

const IconOvalRaw: React.FC<React.SVGProps<SVGPathElement>> = (props) => (
  // Generated by polygons.py
  <path
    d="M-1.75,-1.25 A1,1,0,0,1,1.75,-1.25 L1.75,1.25 A1,1,0,0,1,-1.75,1.25 Z"
    strokeWidth={0.5}
    {...props}
  />
);

const IconNotesRaw: React.FC<React.SVGProps<SVGPathElement>> = (props) => (
  <path
    d="M3 18h12v-2H3v2zM3 6v2h18V6H3zm0 7h18v-2H3v2z"
    transform="scale(0.1) translate(-12, -12)"
    {...props}
  />
);

export default BetaMoveIcon;
