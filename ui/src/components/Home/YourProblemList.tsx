import { graphql, usePaginationFragment } from "react-relay";
import { withQuery } from "relay-query-wrapper";
import { YourProblemList_query$key } from "./__generated__/YourProblemList_query.graphql";
import YourProblemListQuery, {
  YourProblemListQuery as YourProblemListQueryType,
} from "./__generated__/YourProblemListQuery.graphql";
import ProblemList, { ProblemListSkeleton } from "./ProblemList";

interface Props {
  queryKey: YourProblemList_query$key;
}

/**
 * List of the current user's problems
 */
const YourProblemList: React.FC<Props> = ({ queryKey }) => {
  const {
    data: { problems },
    loadNext,
    hasNext,
  } = usePaginationFragment<
    YourProblemListQueryType,
    YourProblemList_query$key
  >(
    graphql`
      fragment YourProblemList_query on Query
      @refetchable(queryName: "YourProblemListQuery") {
        problems(first: $count, after: $cursor, isMine: true)
          @required(action: THROW)
          @connection(key: "YourProblemList_query_problems") {
          edges {
            node {
              id
            }
          }
          ...ProblemList_problemNodeConnection
        }
      }
    `,
    queryKey
  );

  // Don't show anything if the user hasn't uploaded any problems yet
  if (problems.edges.length === 0) {
    return null;
  }

  return (
    <ProblemList
      problemConnectionKey={problems}
      title="Your Problems"
      hasNext={hasNext}
      loadNext={loadNext}
    />
  );
};

export default withQuery<YourProblemListQueryType, Props>({
  // This query is auto-generated by the @refetchable directive above
  query: YourProblemListQuery,
  dataToProps: (data) => ({ queryKey: data }),
  fallbackElement: <ProblemListSkeleton />,
})(YourProblemList);
