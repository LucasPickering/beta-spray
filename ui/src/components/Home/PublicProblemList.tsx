import { graphql, usePaginationFragment } from "react-relay";
import { PublicProblemList_query$key } from "./__generated__/PublicProblemList_query.graphql";
import PublicProblemListQuery, {
  PublicProblemListQuery as PublicProblemListQueryType,
} from "./__generated__/PublicProblemListQuery.graphql";
import { withQuery } from "relay-query-wrapper";
import ProblemList, { ProblemListSkeleton } from "./ProblemList";

interface Props {
  queryKey: PublicProblemList_query$key;
}

/**
 * List of recent public problems
 */
const PublicProblemList: React.FC<Props> = ({ queryKey }) => {
  const {
    data: { problems },
    loadNext,
    hasNext,
  } = usePaginationFragment<
    PublicProblemListQueryType,
    PublicProblemList_query$key
  >(
    graphql`
      fragment PublicProblemList_query on Query
      @refetchable(queryName: "PublicProblemListQuery") {
        problems(first: $count, after: $cursor, visibility: PUBLIC)
          @required(action: THROW)
          @connection(key: "PublicProblemList_query_problems") {
          edges {
            node {
              id
            }
          }
          ...ProblemList_problemNodeConnection
        }
      }
    `,
    queryKey
  );

  return (
    <ProblemList
      problemConnectionKey={problems}
      hasNext={hasNext}
      loadNext={loadNext}
    />
  );
};

export default withQuery<PublicProblemListQueryType, Props>({
  // This query is auto-generated by the @refetchable directive above
  query: PublicProblemListQuery,
  dataToProps: (data) => ({ queryKey: data }),
  fallbackElement: <ProblemListSkeleton />,
})(PublicProblemList);
