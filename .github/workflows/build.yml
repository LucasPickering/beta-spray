name: Build & Deploy

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  select-env:
    name: Select deployment environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.select-env.outputs.env_name }}
    steps:
      - name: Check branch name
        id: select-env
        run: |
          echo "Running on branch ${{ github.ref_name }}"
          if [ "${{ github.ref_name }}" = "master" ]; then
            ENV_NAME=production
          else
            ENV_NAME=development
          fi
          echo "Environment is $ENV_NAME"
          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT

  # The hostname for the deployment is stored in the environment, which means
  # we have to read it *after* selecting the environment, but *before* the job
  # that needs it in the environment definition, so it has to be in its own job
  read-env:
    name: Read hostname from environment
    runs-on: ubuntu-latest
    environment: ${{ needs.select-env.outputs.env_name }}
    outputs:
      hostname: ${{ steps.read-env.outputs.hostname }}
    needs:
      - select-env
    steps:
      - name: Read hostname from environment
        id: read-env
        run: |
          HOSTNAME=${{ vars.HOSTNAME }}
          echo "Hostname is $HOSTNAME"
          echo "hostname=$HOSTNAME" >> $GITHUB_OUTPUT

  build-api:
    name: "Build & Push API Image"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      API_IMAGE_TAG: ghcr.io/lucaspickering/beta-spray-api:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v3
        with:
          context: ./api/
          file: ./api/prd.Dockerfile
          tags: ${{ env.API_IMAGE_TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Django static assets
        # Use dev settings here so we don't need to load secrets
        run: >
          docker run
          -v $PWD/static:/app/src/static
          -e DJANGO_SETTINGS_MODULE=beta_spray.settings.settings_dev
          ${{ env.API_IMAGE_TAG }} ./m.sh collectstatic

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-static-assets
          path: ./static/

  build-ui:
    name: "Build UI static assets"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache npm files
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('ui/package-lock.json') }}

      - name: Install dependencies
        working-directory: ui/
        run: npm install

      - name: Build
        working-directory: ui/
        run: NODE_ENV=production npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ui-static-assets
          path: ./ui/build/

  upload:
    name: "Upload static assets to GCS bucket"
    runs-on: ubuntu-latest
    needs:
      - build-api
      - build-ui
    permissions:
      contents: read
      id-token: write
    steps:
      # Needed in order to pass auth creds to subsequent steps
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Cloud auth
        uses: google-github-actions/auth@v0
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_ID_PROVIDER }}

      # Unpack both UI and API assets into the directory structure that we'll
      # want in the bucket, so we can upload them all at once

      - name: Download UI static assets
        uses: actions/download-artifact@v3
        with:
          name: ui-static-assets
          path: ./assets/

      - name: Download API static assets
        uses: actions/download-artifact@v3
        with:
          name: api-static-assets
          path: ./assets/api-static/

      - name: Upload static assets to GCS
        uses: google-github-actions/upload-cloud-storage@v0
        with:
          path: ./assets/
          parent: false # Don't include /assets/ in the bucket
          destination: beta-spray-static/${{ github.sha }}/

  deploy-app:
    name: Deploy Kubernetes app
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.select-env.outputs.env_name }}
      url: https://${{ needs.read-env.outputs.hostname }}/
    needs:
      - select-env
      - read-env
      - build-api
      - upload
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ vars.CLUSTER_NAME }} --expiry-seconds 600

      - name: Helm deploy
        # The two TLS secrets have to be put in files because they're multi-line
        run: |
          echo "${{ secrets.TLS_CERT }}" > /tmp/tls_cert
          echo "${{ secrets.TLS_KEY }}" > /tmp/tls_key
          helm upgrade beta-spray ./deploy/helm/ \
            --install \
            --namespace ${{ secrets.NAMESPACE }} \
            --create-namespace \
            --set-string versionSha="${{ github.sha }}" \
            --set-string hostname="${{ vars.HOSTNAME }}" \
            --set-string mediaBucket="${{ secrets.MEDIA_BUCKET }}" \
            --set-string staticAssetsHost=storage.googleapis.com \
            --set-string staticAssetsBucket="${{ secrets.STATIC_ASSETS_BUCKET }}" \
            --set-string apiGcpKey="${{ secrets.API_GCP_KEY }}" \
            --set-string apiSecretKey="${{ secrets.API_SECRET_KEY }}" \
            --set-string databasePassword="${{ secrets.DATABASE_PASSWORD }}" \
            --set-file tlsCert=/tmp/tls_cert \
            --set-file tlsKey=/tmp/tls_key
