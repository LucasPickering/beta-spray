name: Lint & Test

env:
  # Keep this in sync with api/Dockerfile,api/prd.Dockerfile
  PYTHON_VERSION: "3.10"
  # Keep this in sync with ui/Dockerfile and ui/.nvmrc
  NODE_VERSION: "16"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # These run natively cause it's faster
  check-ui:
    name: "Lint & Test UI"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        working-directory: ui/
        run: npm install

      - name: Type check
        working-directory: ui/
        run: npm run type-check

      - name: Lint
        working-directory: ui/
        run: npm run lint

      - name: Test
        working-directory: ui/
        run: npm run test

  check-api:
    name: "Lint API"
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: beta_spray.settings.settings_dev
    steps:
      - uses: actions/checkout@v3

      - name: Cache poetry files
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/pypoetry/virtualenvs
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        working-directory: api/
        run: poetry install

      - name: Lint
        working-directory: api/
        run: poetry run flake8

      - name: Check for GraphQL schema changes
        working-directory: api/
        run: |-
          poetry run ./src/manage.py graphql_schema
          git diff --exit-code

      - name: Check for DB schema changes
        working-directory: api/
        run: poetry run ./src/manage.py makemigrations --skip-checks --dry-run --check

      - name: Run Django tests
        working-directory: api/
        run: poetry run ./src/manage.py test

  # This runs in a docker container cause it needs DB access
  test-api:
    name: "Test API"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker-compose build api

      - name: Run Tests
        run: docker-compose run api ./m.sh test
